
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


  model Profile {
    id        String  @id @default(uuid())
    userId    String @unique
    name      String
    imageUrl  String @db.Text
    email    String @db.Text
    bio       String?
    servers  Server[]
    members  Memeber[]
    channels Channel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  model Server {
    id        String  @id @default(uuid())
    name      String
    imageUrl  String @db.Text
    inviteCode String @db.Text
    profileId String
    profile  Profile @relation(fields: [profileId], references: [id] , onDelete: Cascade) 
    members  Memeber[]
    channels Channel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
  }

  enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
  }


  
  model Memeber {
    id        String  @id @default(uuid())
    profileId    String
    serverId  String
    role      MemberRole @default(GUEST)
    server    Server @relation(fields: [serverId], references: [id]  , onDelete: Cascade)
    profile   Profile @relation(fields: [profileId], references: [id] , onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
  }

  enum ChannelTyep{
    TEXT
    AUDIO
    VIDEO
  }

  model Channel {
    id        String  @id @default(uuid())
    name      String
    type      ChannelTyep @default(TEXT)

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id] , onDelete: Cascade)
    
    serverId  String
    server    Server @relation(fields: [serverId], references: [id]  , onDelete: Cascade)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([serverId])
    @@index([profileId])
  }